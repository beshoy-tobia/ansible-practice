version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy-environment:
    steps:
      - run:
          name: "Destory Environment"
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name ansible-test-${CIRCLE_WORKFLOW_ID:0:5}

jobs:
  create-and-deploy-front-end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Execute Cloudformation Template that create bucket"
          command: |
            aws cloudformation create-stack \
              --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:5} \
              --template-body file://bucket.yml \
              --region us-east-1
      - run:
          name: "wait for stack creation complete"
          command: |
            sleep 40s
      - run:
          name: "copy the index file to s3 bucket"
          command: |
            aws s3 cp index.html s3://bucket-ward-2
            aws s3 cp error.html s3://bucket-ward-2

  get-last-deployment-id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: "Fetch and save the old pipeline ID (bucket name) responsible for the last release."
          command: |
            aws cloudformation list-exports --query "Exports[?Name==\`PipelineID\`].Value" --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - "textfile.txt"

  pormote-to-production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Deploy cloudfront new version"
          command: |
            aws cloudformation update-stack \
              --stack-name production-distro \
              --template-body file://cloudfront.yml \
              --region us-east-1

  cleanup-old-front-end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: "Destory the previous s3 bucket"
          command: |
            export OldBucketID=${cat ~/textfile.txt}
            aws s3 rm "s3://${OldBucketID}" --recursive

workflows:
  promote-to-production-workflow:
    jobs:
      - create-and-deploy-front-end
      - pormote-to-production:
          requires:
            - create-and-deploy-front-end
      - get-last-deployment-id
      - cleanup-old-front-end:
          requires:
            - pormote-to-production
            - get-last-deployment-id

